k <- 0.05
while (length(neg_candidates)==0) {
neg_candidates <- dist_neg[which(dist_neg <= (dist_neg_thresh+k))]
k <- k+0.05
}
neg_all <- names(dist_neg)
pos_all <- names(dist_pos)
if (length(neg_candidates)>n_max) {
neg <- sample(names(neg_candidates),n_max)
} else {
neg <- names(neg_candidates)
}
pos <- sample(names(pos_candidates),length(neg))
triplets_hard <- data.frame(matrix(rep("empty",length(neg)),nrow = length(neg),ncol = 4))
colnames(triplets_hard) <- c("A","P","N","margin")
triplets_hard$A <- train$rdkit[i]
triplets_hard$P <- pos
triplets_hard$N <- neg
triplets_hard$margin <- paste0("margin = ",dist_pos_thresh - dist_neg_thresh + k - 0.05)
neg_left <- neg_all[-which(neg_all %in% neg)]
pos_left <- pos_all[-which(pos_all %in% pos)]
# random triplets
nrandom <- round((1/prop_hard)-1) * nrow(triplets_hard)
neg_random <- sample(neg_left,nrandom)
pos_random <- sample(pos_left,nrandom)
triplets_random <- data.frame(matrix(rep("empty",length(nrandom)),nrow = nrandom,ncol = 4))
colnames(triplets_random) <- c("A","P","N","margin")
triplets_random$A <- train$rdkit[i]
# random triplets
nrandom <- round((1/prop_hard)-1) * nrow(triplets_hard)
dist <- 1 - sims
dist_mat <- as.matrix(dist)
n_max <- 5
dist_neg_thresh <- 0.5
dist_pos_thresh <- 0.85
prop_hard <- 0.5
i <- 1
result <- NULL
for (i in 1:5) {
# label of the anchor
label <- train$Binary[i]
# index of drugs with same label as anchor
id_pos <- which(train$Binary == label)
# index of negatives
id_neg <- which(train$Binary != label)
dist_pos <- dist_mat[i,id_pos]
hist(dist_pos)
dist_neg <- dist_mat[i,id_neg]
hist(dist_neg)
#hard triplets margined
neg_candidates <- dist_neg[which(dist_neg <= dist_neg_thresh)]
pos_candidates <- dist_pos[which(dist_pos >= dist_pos_thresh)]
k <- 0.05
while (length(neg_candidates)==0) {
neg_candidates <- dist_neg[which(dist_neg <= (dist_neg_thresh+k))]
k <- k+0.05
}
# all neg and all pos
neg_all <- names(dist_neg)
pos_all <- names(dist_pos)
# maximum allowed hard triplets per drug
if (length(neg_candidates)>n_max) {
neg <- sample(names(neg_candidates),n_max)
} else {
neg <- names(neg_candidates)
}
pos <- sample(names(pos_candidates),length(neg))
triplets_hard <- data.frame(matrix(rep("empty",length(neg)),nrow = length(neg),ncol = 4))
colnames(triplets_hard) <- c("A","P","N","margin")
triplets_hard$A <- train$rdkit[i]
triplets_hard$P <- pos
triplets_hard$N <- neg
triplets_hard$margin <- paste0("margin = ",dist_pos_thresh - dist_neg_thresh + k - 0.05)
neg_left <- neg_all[-which(neg_all %in% neg)]
pos_left <- pos_all[-which(pos_all %in% pos)]
# random triplets
nrandom <- round((1/prop_hard)-1) * nrow(triplets_hard)
neg_random <- sample(neg_left,nrandom)
pos_random <- sample(pos_left,nrandom)
triplets_random <- data.frame(matrix(rep("empty",length(nrandom)),nrow = nrandom,ncol = 4))
colnames(triplets_random) <- c("A","P","N","margin")
triplets_random$A <- train$rdkit[i]
triplets_random$P <- pos_random
triplets_random$N <- neg_random
triplets_random$margin <- "random"
triplets <- bind_rows(triplets_hard,triplets_random)
result[[i]] <- triplets
}
df <- result[[1]]
View(df)
length(result)
triplets <- result[[1]]
View(triplets)
triplets <- result[[1]]
for (i in 2:length(result)) {
df <- result[[i]]
triplets <- bind_rows(triplets,df)
}
View(triplets)
dist <- 1 - sims
dist_mat <- as.matrix(dist)
n_max <- 5
dist_neg_thresh <- 0.5
dist_pos_thresh <- 0.85
prop_hard <- 0.5
result <- NULL
for (i in 1:nrow(train)) {
# label of the anchor
label <- train$Binary[i]
# index of drugs with same label as anchor
id_pos <- which(train$Binary == label)
# index of negatives
id_neg <- which(train$Binary != label)
dist_pos <- dist_mat[i,id_pos]
hist(dist_pos)
dist_neg <- dist_mat[i,id_neg]
hist(dist_neg)
#hard triplets margined
neg_candidates <- dist_neg[which(dist_neg <= dist_neg_thresh)]
pos_candidates <- dist_pos[which(dist_pos >= dist_pos_thresh)]
k <- 0.05
while (length(neg_candidates)==0) {
neg_candidates <- dist_neg[which(dist_neg <= (dist_neg_thresh+k))]
k <- k+0.05
}
# all neg and all pos
neg_all <- names(dist_neg)
pos_all <- names(dist_pos)
# maximum allowed hard triplets per drug
if (length(neg_candidates)>n_max) {
neg <- sample(names(neg_candidates),n_max)
} else {
neg <- names(neg_candidates)
}
pos <- sample(names(pos_candidates),length(neg))
triplets_hard <- data.frame(matrix(rep("empty",length(neg)),nrow = length(neg),ncol = 4))
colnames(triplets_hard) <- c("A","P","N","margin")
triplets_hard$A <- train$rdkit[i]
triplets_hard$P <- pos
triplets_hard$N <- neg
triplets_hard$margin <- paste0("margin = ",dist_pos_thresh - dist_neg_thresh + k - 0.05)
neg_left <- neg_all[-which(neg_all %in% neg)]
pos_left <- pos_all[-which(pos_all %in% pos)]
# random triplets
nrandom <- round((1/prop_hard)-1) * nrow(triplets_hard)
neg_random <- sample(neg_left,nrandom)
pos_random <- sample(pos_left,nrandom)
triplets_random <- data.frame(matrix(rep("empty",length(nrandom)),nrow = nrandom,ncol = 4))
colnames(triplets_random) <- c("A","P","N","margin")
triplets_random$A <- train$rdkit[i]
triplets_random$P <- pos_random
triplets_random$N <- neg_random
triplets_random$margin <- "random"
triplets <- bind_rows(triplets_hard,triplets_random)
result[[i]] <- triplets
}
triplets <- result[[1]]
for (i in 2:length(result)) {
df <- result[[i]]
triplets <- bind_rows(triplets,df)
}
View(triplets)
write.csv(triplets,"C:/Users/user/Documents/kinase_binding/learning/data/p38/split_aveb/fold_0/triplets_train_0.csv")
library(Rtsne)
library(tidyverse)
embs <- read.csv("C:/Users/user/Documents/kinase_binding/learning/data/p38/split_aveb/fold_0/embeddings_0.csv")
embs <- embs[,-1]
val <- read.csv("C:/Users/user/Documents/kinase_binding/learning/data/p38/split_aveb/fold_0/val_0.csv")
train <- read.csv("C:/Users/user/Documents/kinase_binding/learning/data/p38/split_aveb/fold_0/train_0.csv")
tsne_emb <- Rtsne(scale(embs), dims = 2, perplexity=5, verbose=TRUE, max_iter = 1000,initial_dims = 20,check_duplicates = F)
df_emb <- data.frame(V1 = tsne_emb$Y[,1], V2 =tsne_emb$Y[,2], label = as.factor(val$Binary))
gtsne <- ggplot(df_emb, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_discrete()
gtsne
train_embs <- read.csv("C:/Users/user/Documents/kinase_binding/learning/data/p38/split_aveb/fold_0/embeddings_train_0.csv")
train_embs <- train_embs[,-1]
tsne_emb_train <- Rtsne(scale(train_embs), dims = 2, perplexity=50, verbose=TRUE, max_iter = 1000,initial_dims = 20,check_duplicates = F)
df_emb <- data.frame(V1 = tsne_emb_train$Y[,1], V2 =tsne_emb_train$Y[,2], label = as.factor(train$Binary))
gtsne <- ggplot(df_emb, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_discrete()
gtsne
tsne_emb_train <- Rtsne(scale(train_embs), dims = 2, perplexity=100, verbose=TRUE, max_iter = 1000,initial_dims = 20,check_duplicates = F)
tsne_emb_train <- Rtsne(scale(train_embs), dims = 2, perplexity=100, verbose=TRUE, max_iter = 1000,initial_dims = 50,check_duplicates = F)
df_emb <- data.frame(V1 = tsne_emb_train$Y[,1], V2 =tsne_emb_train$Y[,2], label = as.factor(train$Binary))
gtsne <- ggplot(df_emb, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_discrete()
gtsne
require("class")
model1<- knn(train=(train_embs), test=(embs), cl=as.factor(train$Binary), k=500)
model1<- knn(train=(train_embs), test=(embs), cl=as.factor(train$Binary), k=600)
model1<- knn(train=(train_embs), test=(embs), cl=as.factor(train$Binary), k=100)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(train=(train_embs), test=(embs), cl=as.factor(train$Binary), k=300)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
test <- rbind(train_embs,embs[1,])
tsne_test <- Rtsne(scale(test), dims = 2, perplexity=50, verbose=TRUE, max_iter = 1000,initial_dims = 50,check_duplicates = F)
df_test <- data.frame(V1 = tsne_test$Y[,1], V2 =tsne_test$Y[,2], label = as.factor(c(train$Binary,val$Binary[1])))
gtest <- ggplot(df_test, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_discrete()
gtest
df_test <- data.frame(V1 = tsne_test$Y[,1], V2 =tsne_test$Y[,2], label = as.factor(c(train$Binary,2)))
gtest <- ggplot(df_test, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_discrete()
gtest
View(val)
test <- rbind(train_embs,embs[2,])
tsne_test <- Rtsne(scale(test), dims = 2, perplexity=50, verbose=TRUE, max_iter = 1000,initial_dims = 50,check_duplicates = F)
df_test <- data.frame(V1 = tsne_test$Y[,1], V2 =tsne_test$Y[,2], label = as.factor(c(train$Binary,2)))
gtest <- ggplot(df_test, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_discrete()
gtest
View(val)
test <- rbind(train_embs,embs[5,])
tsne_test <- Rtsne(scale(test), dims = 2, perplexity=50, verbose=TRUE, max_iter = 1000,initial_dims = 50,check_duplicates = F)
df_test <- data.frame(V1 = tsne_test$Y[,1], V2 =tsne_test$Y[,2], label = as.factor(c(train$Binary,2)))
gtest <- ggplot(df_test, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_discrete()
gtest
test <- rbind(train_embs,embs[7,])
tsne_test <- Rtsne(scale(test), dims = 2, perplexity=50, verbose=TRUE, max_iter = 1000,initial_dims = 50,check_duplicates = F)
df_test <- data.frame(V1 = tsne_test$Y[,1], V2 =tsne_test$Y[,2], label = as.factor(c(train$Binary,2)))
gtest <- ggplot(df_test, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_discrete()
gtest
test <- rbind(train_embs,embs[5,])
tsne_test <- Rtsne(scale(test), dims = 2, perplexity=50, verbose=TRUE, max_iter = 1000,initial_dims = 50,check_duplicates = F)
df_test <- data.frame(V1 = tsne_test$Y[,1], V2 =tsne_test$Y[,2], label = as.factor(c(train$Binary,2)))
gtest <- ggplot(df_test, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_discrete()
gtest
model1<- knn(c(df_emb), test=(embs), cl=as.factor(train$Binary), k=300)
all <- bind_rows(train,val)
all_emb <- bind_rows(train_embs,embs)
all_tsne <- Rtsne(scale(all_emb), dims = 2, perplexity=50, verbose=TRUE, max_iter = 1000,initial_dims = 50,check_duplicates = F)
df_all <- data.frame(V1 = all_tsne$Y[,1], V2 =all_tsne$Y[,2], label = as.factor(all$Binary))
a <- c(df_all$V1,df_all$V2)
a <- cbind(df_all$V1,df_all$V2)
View(a)
View(a)
id <- which(all$rdkit %in% val$rdkit)
model1<- knn(a, test=a[id], cl=as.factor(all$Binary), k=300)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=5)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=4)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=6)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=7)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=8)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=9)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=8)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=6)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=5)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=6)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=6)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=6)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=5)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=6,use.all = T)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=6,use.all = T)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=6,use.all = T)
tab <- table(model1,as.factor(val$Binary))
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
print(model1)
tab
37/(37+90)
30/255
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=6,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=5,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=5,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=5,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=5,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=5,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=6,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=6,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=7,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=7,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=20,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=50,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=2,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=1,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=2,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=2,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=2,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=3,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a, test=a[id,], cl=as.factor(all$Binary), k=1,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a[-id,], test=a[id,], cl=as.factor(all$Binary[id]), k=1,use.all = T)
tab <- table(model1,as.factor(val$Binary))
model1<- knn(a[-id,], test=a[id,], cl=as.factor(all$Binary[-id]), k=1,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a[-id,], test=a[id,], cl=as.factor(all$Binary[-id]), k=2,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a[-id,], test=a[id,], cl=as.factor(all$Binary[-id]), k=3,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a[-id,], test=a[id,], cl=as.factor(all$Binary[-id]), k=4,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a[-id,], test=a[id,], cl=as.factor(all$Binary[-id]), k=6,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a[-id,], test=a[id,], cl=as.factor(all$Binary[-id]), k=5,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a[-id,], test=a[id,], cl=as.factor(all$Binary[-id]), k=7,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a[-id,], test=a[id,], cl=as.factor(all$Binary[-id]), k=8,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a[-id,], test=a[id,], cl=as.factor(all$Binary[-id]), k=9,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a[-id,], test=a[id,], cl=as.factor(all$Binary[-id]), k=10,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a[-id,], test=a[id,], cl=as.factor(all$Binary[-id]), k=20,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
model1<- knn(a[-id,], test=a[id,], cl=as.factor(all$Binary[-id]), k=30,use.all = T)
tab <- table(model1,as.factor(val$Binary))
tab
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
## Estimate class probabilities
classProbs = TRUE,
## Evaluate performance using
## the following function
summaryFunction = twoClassSummary)
library(caret)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
## Estimate class probabilities
classProbs = TRUE,
## Evaluate performance using
## the following function
summaryFunction = twoClassSummary)
View(train_embs)
train_embs$labels <- as.character(train$Binary)
alexo_tree = train(labels ~ .,
data=train_embs,
method="rf",
trControl = fitControl,metric = "ROC",tuneLength = 10)
train_embs$labels
train_embs <- train_embs %>% mutate(labels=if_else(labels == "1","positive","negative"))
alexo_tree = train(labels ~ .,
data=train_embs,
method="rf",
trControl = fitControl,metric = "ROC",tuneLength = 10)
alexo_tree
extractPrediction(alexo_tree$finalModel,
testX = embs, testY = NULL,
unkX = NULL,
unkOnly = !is.null(unkX) & is.null(testX),
verbose = FALSE)
extractPrediction(alexo_tree$finalModel,
testX = embs, testY = NULL,
unkX = NULL,
verbose = FALSE)
extractPrediction(alexo_tree,
testX = embs, testY = NULL,
unkX = NULL,
verbose = FALSE)
predict(alexo_tree,embs)
a <- predict(alexo_tree,embs)
a <- as.data.frame(a)
a$true <- val$Binary
View(a)
a <- a %>% mutate(true = if_else(true == 1,"positive","negative"))
View(a)
length(which(a$a==a$true))/nrow(a)
